{"version":3,"sources":["webpack:////home/marco/Documents/BeCode/BeBook/node_modules/react-router/node_modules/isarray/index.js","webpack:////home/marco/Documents/BeCode/BeBook/node_modules/react-router/node_modules/path-to-regexp/index.js","webpack:////home/marco/Documents/BeCode/BeBook/node_modules/react-router/es/matchPath.js","webpack:////home/marco/Documents/BeCode/BeBook/node_modules/react-router/es/generatePath.js"],"names":["module","exports","Array","isArray","arr","Object","prototype","toString","call","isarray","__webpack_require__","pathToRegexp","parse","compile","str","options","tokensToFunction","tokensToRegExp","PATH_REGEXP","RegExp","join","res","tokens","key","index","path","defaultDelimiter","delimiter","exec","m","escaped","offset","slice","length","next","prefix","name","capture","group","modifier","asterisk","push","partial","repeat","optional","pattern","escapeGroup","escapeString","substr","encodeURIComponentPretty","encodeURI","replace","c","charCodeAt","toUpperCase","matches","i","obj","opts","data","encode","pretty","encodeURIComponent","token","segment","value","TypeError","JSON","stringify","j","test","attachKeys","re","keys","flags","sensitive","strict","end","route","endsWithDelimiter","groups","source","match","regexpToRegexp","parts","arrayToRegexp","stringToRegexp","path_to_regexp__WEBPACK_IMPORTED_MODULE_0__","path_to_regexp__WEBPACK_IMPORTED_MODULE_0___default","n","patternCache","cacheCount","__webpack_exports__","pathname","arguments","undefined","parent","_options","_options$exact","exact","_options$strict","_options$sensitive","_compilePath","cacheKey","cache","compiledPattern","compilePath","url","values","isExact","params","reduce","memo","compiledGenerator","a","compileGenerator","generator"],"mappings":"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","file":"js/8453bc9f3e224a9222bf.js","sourcesContent":["module.exports = Array.isArray || function (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]';\n};\n","var isarray = require('isarray')\n\n/**\n * Expose `pathToRegexp`.\n */\nmodule.exports = pathToRegexp\nmodule.exports.parse = parse\nmodule.exports.compile = compile\nmodule.exports.tokensToFunction = tokensToFunction\nmodule.exports.tokensToRegExp = tokensToRegExp\n\n/**\n * The main path matching regexp utility.\n *\n * @type {RegExp}\n */\nvar PATH_REGEXP = new RegExp([\n  // Match escaped characters that would otherwise appear in future matches.\n  // This allows the user to escape special characters that won't transform.\n  '(\\\\\\\\.)',\n  // Match Express-style parameters and un-named parameters with a prefix\n  // and optional suffixes. Matches appear as:\n  //\n  // \"/:test(\\\\d+)?\" => [\"/\", \"test\", \"\\d+\", undefined, \"?\", undefined]\n  // \"/route(\\\\d+)\"  => [undefined, undefined, undefined, \"\\d+\", undefined, undefined]\n  // \"/*\"            => [\"/\", undefined, undefined, undefined, undefined, \"*\"]\n  '([\\\\/.])?(?:(?:\\\\:(\\\\w+)(?:\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))?|\\\\(((?:\\\\\\\\.|[^\\\\\\\\()])+)\\\\))([+*?])?|(\\\\*))'\n].join('|'), 'g')\n\n/**\n * Parse a string for the raw tokens.\n *\n * @param  {string}  str\n * @param  {Object=} options\n * @return {!Array}\n */\nfunction parse (str, options) {\n  var tokens = []\n  var key = 0\n  var index = 0\n  var path = ''\n  var defaultDelimiter = options && options.delimiter || '/'\n  var res\n\n  while ((res = PATH_REGEXP.exec(str)) != null) {\n    var m = res[0]\n    var escaped = res[1]\n    var offset = res.index\n    path += str.slice(index, offset)\n    index = offset + m.length\n\n    // Ignore already escaped sequences.\n    if (escaped) {\n      path += escaped[1]\n      continue\n    }\n\n    var next = str[index]\n    var prefix = res[2]\n    var name = res[3]\n    var capture = res[4]\n    var group = res[5]\n    var modifier = res[6]\n    var asterisk = res[7]\n\n    // Push the current path onto the tokens.\n    if (path) {\n      tokens.push(path)\n      path = ''\n    }\n\n    var partial = prefix != null && next != null && next !== prefix\n    var repeat = modifier === '+' || modifier === '*'\n    var optional = modifier === '?' || modifier === '*'\n    var delimiter = res[2] || defaultDelimiter\n    var pattern = capture || group\n\n    tokens.push({\n      name: name || key++,\n      prefix: prefix || '',\n      delimiter: delimiter,\n      optional: optional,\n      repeat: repeat,\n      partial: partial,\n      asterisk: !!asterisk,\n      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')\n    })\n  }\n\n  // Match any characters still remaining.\n  if (index < str.length) {\n    path += str.substr(index)\n  }\n\n  // If the path exists, push it onto the end.\n  if (path) {\n    tokens.push(path)\n  }\n\n  return tokens\n}\n\n/**\n * Compile a string to a template function for the path.\n *\n * @param  {string}             str\n * @param  {Object=}            options\n * @return {!function(Object=, Object=)}\n */\nfunction compile (str, options) {\n  return tokensToFunction(parse(str, options))\n}\n\n/**\n * Prettier encoding of URI path segments.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeURIComponentPretty (str) {\n  return encodeURI(str).replace(/[\\/?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.\n *\n * @param  {string}\n * @return {string}\n */\nfunction encodeAsterisk (str) {\n  return encodeURI(str).replace(/[?#]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase()\n  })\n}\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nfunction tokensToFunction (tokens) {\n  // Compile all the tokens into regexps.\n  var matches = new Array(tokens.length)\n\n  // Compile all the patterns before compilation.\n  for (var i = 0; i < tokens.length; i++) {\n    if (typeof tokens[i] === 'object') {\n      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$')\n    }\n  }\n\n  return function (obj, opts) {\n    var path = ''\n    var data = obj || {}\n    var options = opts || {}\n    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent\n\n    for (var i = 0; i < tokens.length; i++) {\n      var token = tokens[i]\n\n      if (typeof token === 'string') {\n        path += token\n\n        continue\n      }\n\n      var value = data[token.name]\n      var segment\n\n      if (value == null) {\n        if (token.optional) {\n          // Prepend partial segment prefixes.\n          if (token.partial) {\n            path += token.prefix\n          }\n\n          continue\n        } else {\n          throw new TypeError('Expected \"' + token.name + '\" to be defined')\n        }\n      }\n\n      if (isarray(value)) {\n        if (!token.repeat) {\n          throw new TypeError('Expected \"' + token.name + '\" to not repeat, but received `' + JSON.stringify(value) + '`')\n        }\n\n        if (value.length === 0) {\n          if (token.optional) {\n            continue\n          } else {\n            throw new TypeError('Expected \"' + token.name + '\" to not be empty')\n          }\n        }\n\n        for (var j = 0; j < value.length; j++) {\n          segment = encode(value[j])\n\n          if (!matches[i].test(segment)) {\n            throw new TypeError('Expected all \"' + token.name + '\" to match \"' + token.pattern + '\", but received `' + JSON.stringify(segment) + '`')\n          }\n\n          path += (j === 0 ? token.prefix : token.delimiter) + segment\n        }\n\n        continue\n      }\n\n      segment = token.asterisk ? encodeAsterisk(value) : encode(value)\n\n      if (!matches[i].test(segment)) {\n        throw new TypeError('Expected \"' + token.name + '\" to match \"' + token.pattern + '\", but received \"' + segment + '\"')\n      }\n\n      path += token.prefix + segment\n    }\n\n    return path\n  }\n}\n\n/**\n * Escape a regular expression string.\n *\n * @param  {string} str\n * @return {string}\n */\nfunction escapeString (str) {\n  return str.replace(/([.+*?=^!:${}()[\\]|\\/\\\\])/g, '\\\\$1')\n}\n\n/**\n * Escape the capturing group by escaping special characters and meaning.\n *\n * @param  {string} group\n * @return {string}\n */\nfunction escapeGroup (group) {\n  return group.replace(/([=!:$\\/()])/g, '\\\\$1')\n}\n\n/**\n * Attach the keys as a property of the regexp.\n *\n * @param  {!RegExp} re\n * @param  {Array}   keys\n * @return {!RegExp}\n */\nfunction attachKeys (re, keys) {\n  re.keys = keys\n  return re\n}\n\n/**\n * Get the flags for a regexp from the options.\n *\n * @param  {Object} options\n * @return {string}\n */\nfunction flags (options) {\n  return options.sensitive ? '' : 'i'\n}\n\n/**\n * Pull out keys from a regexp.\n *\n * @param  {!RegExp} path\n * @param  {!Array}  keys\n * @return {!RegExp}\n */\nfunction regexpToRegexp (path, keys) {\n  // Use a negative lookahead to match only capturing groups.\n  var groups = path.source.match(/\\((?!\\?)/g)\n\n  if (groups) {\n    for (var i = 0; i < groups.length; i++) {\n      keys.push({\n        name: i,\n        prefix: null,\n        delimiter: null,\n        optional: false,\n        repeat: false,\n        partial: false,\n        asterisk: false,\n        pattern: null\n      })\n    }\n  }\n\n  return attachKeys(path, keys)\n}\n\n/**\n * Transform an array into a regexp.\n *\n * @param  {!Array}  path\n * @param  {Array}   keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction arrayToRegexp (path, keys, options) {\n  var parts = []\n\n  for (var i = 0; i < path.length; i++) {\n    parts.push(pathToRegexp(path[i], keys, options).source)\n  }\n\n  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))\n\n  return attachKeys(regexp, keys)\n}\n\n/**\n * Create a path regexp from string input.\n *\n * @param  {string}  path\n * @param  {!Array}  keys\n * @param  {!Object} options\n * @return {!RegExp}\n */\nfunction stringToRegexp (path, keys, options) {\n  return tokensToRegExp(parse(path, options), keys, options)\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n *\n * @param  {!Array}          tokens\n * @param  {(Array|Object)=} keys\n * @param  {Object=}         options\n * @return {!RegExp}\n */\nfunction tokensToRegExp (tokens, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  var strict = options.strict\n  var end = options.end !== false\n  var route = ''\n\n  // Iterate over the tokens and create our regexp string.\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i]\n\n    if (typeof token === 'string') {\n      route += escapeString(token)\n    } else {\n      var prefix = escapeString(token.prefix)\n      var capture = '(?:' + token.pattern + ')'\n\n      keys.push(token)\n\n      if (token.repeat) {\n        capture += '(?:' + prefix + capture + ')*'\n      }\n\n      if (token.optional) {\n        if (!token.partial) {\n          capture = '(?:' + prefix + '(' + capture + '))?'\n        } else {\n          capture = prefix + '(' + capture + ')?'\n        }\n      } else {\n        capture = prefix + '(' + capture + ')'\n      }\n\n      route += capture\n    }\n  }\n\n  var delimiter = escapeString(options.delimiter || '/')\n  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter\n\n  // In non-strict mode we allow a slash at the end of match. If the path to\n  // match already ends with a slash, we remove it for consistency. The slash\n  // is valid at the end of a path match, not in the middle. This is important\n  // in non-ending mode, where \"/test/\" shouldn't match \"/test//route\".\n  if (!strict) {\n    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'\n  }\n\n  if (end) {\n    route += '$'\n  } else {\n    // In non-ending mode, we need the capturing groups to match as much as\n    // possible by using a positive lookahead to the end or next path segment.\n    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'\n  }\n\n  return attachKeys(new RegExp('^' + route, flags(options)), keys)\n}\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n *\n * @param  {(string|RegExp|Array)} path\n * @param  {(Array|Object)=}       keys\n * @param  {Object=}               options\n * @return {!RegExp}\n */\nfunction pathToRegexp (path, keys, options) {\n  if (!isarray(keys)) {\n    options = /** @type {!Object} */ (keys || options)\n    keys = []\n  }\n\n  options = options || {}\n\n  if (path instanceof RegExp) {\n    return regexpToRegexp(path, /** @type {!Array} */ (keys))\n  }\n\n  if (isarray(path)) {\n    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)\n  }\n\n  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)\n}\n","import pathToRegexp from \"path-to-regexp\";\n\nvar patternCache = {};\nvar cacheLimit = 10000;\nvar cacheCount = 0;\n\nvar compilePath = function compilePath(pattern, options) {\n  var cacheKey = \"\" + options.end + options.strict + options.sensitive;\n  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});\n\n  if (cache[pattern]) return cache[pattern];\n\n  var keys = [];\n  var re = pathToRegexp(pattern, keys, options);\n  var compiledPattern = { re: re, keys: keys };\n\n  if (cacheCount < cacheLimit) {\n    cache[pattern] = compiledPattern;\n    cacheCount++;\n  }\n\n  return compiledPattern;\n};\n\n/**\n * Public API for matching a URL pathname to a path pattern.\n */\nvar matchPath = function matchPath(pathname) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var parent = arguments[2];\n\n  if (typeof options === \"string\") options = { path: options };\n\n  var _options = options,\n      path = _options.path,\n      _options$exact = _options.exact,\n      exact = _options$exact === undefined ? false : _options$exact,\n      _options$strict = _options.strict,\n      strict = _options$strict === undefined ? false : _options$strict,\n      _options$sensitive = _options.sensitive,\n      sensitive = _options$sensitive === undefined ? false : _options$sensitive;\n\n\n  if (path == null) return parent;\n\n  var _compilePath = compilePath(path, { end: exact, strict: strict, sensitive: sensitive }),\n      re = _compilePath.re,\n      keys = _compilePath.keys;\n\n  var match = re.exec(pathname);\n\n  if (!match) return null;\n\n  var url = match[0],\n      values = match.slice(1);\n\n  var isExact = pathname === url;\n\n  if (exact && !isExact) return null;\n\n  return {\n    path: path, // the path pattern used to match\n    url: path === \"/\" && url === \"\" ? \"/\" : url, // the matched portion of the URL\n    isExact: isExact, // whether or not we matched exactly\n    params: keys.reduce(function (memo, key, index) {\n      memo[key.name] = values[index];\n      return memo;\n    }, {})\n  };\n};\n\nexport default matchPath;","import pathToRegexp from \"path-to-regexp\";\n\nvar patternCache = {};\nvar cacheLimit = 10000;\nvar cacheCount = 0;\n\nvar compileGenerator = function compileGenerator(pattern) {\n  var cacheKey = pattern;\n  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});\n\n  if (cache[pattern]) return cache[pattern];\n\n  var compiledGenerator = pathToRegexp.compile(pattern);\n\n  if (cacheCount < cacheLimit) {\n    cache[pattern] = compiledGenerator;\n    cacheCount++;\n  }\n\n  return compiledGenerator;\n};\n\n/**\n * Public API for generating a URL pathname from a pattern and parameters.\n */\nvar generatePath = function generatePath() {\n  var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"/\";\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (pattern === \"/\") {\n    return pattern;\n  }\n  var generator = compileGenerator(pattern);\n  return generator(params, { pretty: true });\n};\n\nexport default generatePath;"],"sourceRoot":""}