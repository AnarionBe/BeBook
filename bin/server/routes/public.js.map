{"version":3,"sources":["../../../src/server/routes/public.js"],"names":["router","express","Router","post","req","res","email","body","password","User","findOne","then","user","status","json","bcrypt","compare","isMatch","payload","id","role","firstName","lastName","avatar","secretKey","process","env","JWT_SECRET","jwt","sign","expiresIn","err","token","send","success","gravatar","url","s","r","d","newUser","genSalt","salt","hash","save","catch"],"mappings":"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","sourcesContent":["import express from \"express\";\nimport gravatar from \"gravatar\";\nimport bcrypt from \"bcryptjs\";\nimport jwt from \"jsonwebtoken\";\nimport User from \"../models/User\";\n// import env from \"../configs/env\";\n\nconst router = new express.Router();\n\n// -------------------------------------------------------------------------- //\n\n// Log the User in.\nrouter.post(\"/login\", (req, res) => {\n    const email = req.body.email;\n    const password = req.body.password;\n\n    User.findOne({email}).then(user => {\n        if (!user) {\n            return res\n                .status(400)\n                .json({email: \"The user has not been found!\"});\n        }\n\n        bcrypt.compare(password, user.password).then(isMatch => {\n            if (isMatch) {\n                // Create the payload.\n                const payload = {\n                    id: user.id,\n                    role: user.role,\n                    firstName: user.firstName,\n                    lastName: user.lastName,\n                    avatar: user.avatar,\n                };\n\n                const secretKey = process.env.JWT_SECRET;\n\n                // Sign the token.\n                jwt.sign(\n                    payload,\n                    secretKey,\n                    {expiresIn: 7 * 24 * 60 * 60},\n                    (err, token) => {\n                        if (err) {\n                            return res.status(500).send(err);\n                        }\n                        return res.status(201).json({\n                            success: true,\n                            token: `Bearer ${token}`,\n                        });\n                    },\n                );\n            } else {\n                return res\n                    .status(400)\n                    .json({password: \"The password is incorrect!\"});\n            }\n        });\n    });\n});\n\n// Register a new User.\nrouter.post(\"/register\", (req, res) => {\n    User.findOne({email: req.body.email}).then(user => {\n        if (user) {\n            return res.status(400).json({email: \"The user already exists!\"});\n        }\n\n        const avatar = gravatar.url(req.body.email, {\n            s: 200,\n            r: \"pg\",\n            d: \"mm\",\n        });\n\n        const newUser = new User({\n            firstName: req.body.firstName,\n            lastName: req.body.lastName,\n            email: req.body.email,\n            avatar: avatar,\n            password: req.body.password,\n        });\n\n        bcrypt.genSalt(10, (err, salt) => {\n            if (err) {\n                return res.status(500).send(err);\n            }\n            // eslint-disable-next-line no-shadow\n            bcrypt.hash(newUser.password, salt, (err, hash) => {\n                if (err) {\n                    return res.status(500).send(err);\n                }\n                newUser.password = hash;\n                newUser\n                    .save()\n                    // eslint-disable-next-line no-shadow\n                    .then(user => res.status(200).json(user))\n                    // eslint-disable-next-line no-shadow\n                    .catch(err => res.status(500).send(err));\n            });\n        });\n    });\n});\n\nexport default router;\n"],"file":"public.js"}